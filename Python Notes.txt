

Quotient:
>>> 18%4
2

Normal division:
>>> 18/4
4.5

Round down:
>>> 18//4
4


Power:
>>> 5**2
25

Variables:
>>> tuna=5
>>> 20+tuna*5
45

-----------------------------------------------------------------------------------

String:
-------
>>> "Kushal is Awesome"
'Kushal is Awesome'

>>> 'yeah he is'
'yeah he is'

For now double or single quote is fine.

>>> "I don't think she is 18"  /had to use the double quotes
"I don't think she is 18"

Escape Character:
>>> 'We\'ll'
"We'll"

Printing on screen:
>>> print("Hey now")
Hey now 

>>> print('C:\Kushal\Desktop\new')  /n will make it go to new line
C:\Kushal\Desktop
ew

So we need to do like:
>>> print('C:\Kushal\Desktop\\new')
C:\Kushal\Desktop\new

OR:

>>> print(r'C:\Kushal\Desktop\new')  // using r will escape all the characters.
C:\Kushal\Desktop\new


>>> FN="Kushal"
>>> SN="Pradhan"
>>> FN+SN
'KushalPradhan'
>>> FN * 4
'KushalKushalKushalKushal'

----------------------------------------------------------------------------------------------

>>> user="Tuna McFish"
>>> user[0]
'T'
>>> user[78]
Traceback (most recent call last):
  File "<pyshell#51>", line 1, in <module>
    user[78]
IndexError: string index out of range
>>> user[-1]  -1 is for the last character
'h'
>>> user[-2]
's'

>>> user[2:7]  2 is inclusive and 7 is exclusive
'na M


>>> user[:7]
'Tuna Mc'
>>> user[2:]
'na McFish'


>>> len(user) // gives the length of the string or variable
11



----------------------------------------------------------------------------------------

List:

>>> players=[29,58,34,29,15,88]
>>> players[3]
29


>>> players[3]=30  //replaced the value
>>> players
[29, 58, 34, 30, 15, 88]

>>> players+[1, 2, 3] Can add to the list
[29, 58, 34, 30, 15, 88, 1, 2, 3]
>>> players // but the original list of players will be the same. If you want then assign it to the new variable
[29, 58, 34, 30, 15, 88]


>>> players.append(10)  //append permanently adds to the list
>>> players
[29, 58, 34, 30, 15, 88, 10]

>>> players[:2]=[11,22]
>>> players
[11, 22, 34, 30, 15, 88, 10]

Deleting items:

>>> players[:2]=[]
>>> players
[34, 30, 15, 88, 10]

Delete all the elements:
>>> players[:]=[]
>>> players
[]


-----------------------------------------------------------------------------------------


Installed Pycharm for Python IDE:


if :
----

name = "aman"
if name is "Kushal":
    print("You are not Lucy ")
elif name is "lucy":
    print("what up Lucy")
elif name is "aman":
    print("what up Bigdog")
else:
    print("I donn know you")




for :
------

foods = ['pizza', 'burger', 'wings', 'chips', 'sandwich']
for f in foods:
    print(f)

for f in foods[:2]:
    print(f)
    print(len(f))

-----------------------------------------------------------------



Range:
-------

for x in range(10):
    print(x)
    gives from 0 to 9

for x in range(10,15):
    print(x)
	gives from 10 to 14

for x in range(10,20,2):
    print(x)
    gives 10 12 14 16 18



While:
-------

kushal = 5
while kushal < 10:
    print(kushal)
    kushal +=1


------------------------------------------------------------


break and continue:
----------------------

magicNumber = 12

for x in range(1,101):
    if x is magicNumber:
        print("magic number is ", x, " wala")
        break
    else:
        print(x)



 # is the single line comment
 multiline comment is done as:

 ...
 wala this is multiline comment
 haha
 ...

 Continue:
 --------
    numbersTaken = [2, 5, 12, 14, 15, 17, 18]
    print("Here are the numbers still available: ")
    for x in range(1, 20):
        if x in numbersTaken:
            continue
        print(x)

Continue keep going through the loop but skip certain.


---------------------------------------------------------------


Functions:
----------
def wala():
    print("Dayme, functions are cool")

wala()  // callling the function

def NPR_to_USD( npr):
    amount= npr /97
    print(amount)

NPR_to_USD(100)



Return Values:
---------------
def allowed_dating_age(my_age):
    girl_age = my_age/2 + 7;
    return girl_age

print("Allowed age is: " , allowed_dating_age(23))



Default Values for Arguments:
------------------------------
 

 def get_gender(sex="unknown"):
    if sex is 'm':
        sex ="Male"
    elif sex is 'f':
        sex = "Female"
    print(sex)

get_gender('m')
get_gender('f')
get_gender()



Variable Scope:
---------------

def corn():
    a = 868
    print(a)

def fudge():
    print(a)

corn()
fudge() // this will give error as a is defined inside a function



KeyWord Arguments:
-------------------
def dumb_sentence(name="Kushal", action="ate", item="tuna"):
    print(name, action, item)

dumb_sentence()
dumb_sentence("Sallie", "farts", "gently")
dumb_sentence(item="Pizza", action="loves")

Result:
    Kushal ate tuna
    Sallie farts gently
    Kushal loves Pizza


Flexible number of arguments:
------------------------------

def add_numbers(*args):
    total = 0
    for a in args:
        total +=a
    print(total)

add_numbers(3)
add_numbers(23,232)
add_numbers(4,4,23,2)



Unpacking arguments:
--------------------

def health_calculator(age, apple_you_ate, cigs_smoked):
    answer = (100-age)+(apple_you_ate*3.5)-(cigs_smoked*2)
    print(answer)

data_kushal=[27,4,0]
health_calculator(*data_kushal)  // * is for unpacking the data for arguments



Sets:
-----
Unique collection of item unlike list.


groceries_list=['cerals', 'milk', 'starcrunch', 'beer', 'lotion', 'beer']
groceries_set={'cerals', 'milk', 'starcrunch', 'beer', 'lotion', 'beer'}
print(groceries_list)
print(groceries_set)

result:
['cerals', 'milk', 'starcrunch', 'beer', 'lotion', 'beer']
{'beer', 'lotion', 'starcrunch', 'milk', 'cerals'}



Dictionary:
-----------
They have keys and values.

classmates={'Tony':'cool but smells', 'aman':'cool but hungry', 'kushal':'always awesome'}
print(classmates["aman"])

Result:
    cool but hungry



classmates = {'Tony':'cool but smells', 'aman':'cool but hungry', 'kushal':'always awesome'}

for k,v in classmates.items():   // here .items() is different
    print(k, "is", v)

    Result:
        kushal is always awesome
        aman is cool but hungry
        Tony is cool but smells



Modules:
--------
In a one file:

def fish():
    print("I am  a Tuna fish")

In other file:
    import Tuna
    import random

    Tuna.fish()
    x=random.randrange(1,100)
    print(x)



Downloading an image from web page:
-------------------------------------

import random
import  urllib.request

def downloadWebImage(url):
    name = random.randrange(1,1000)
    full_name= str(name)+".jpg"
    urllib.request.urlretrieve(url,full_name)

downloadWebImage("http://www.arsenal.com/assets/_files/scaled/696x392/oct_14/gun__1412238694_welbeck_gala4.jpg")




how to read and write Files:
----------------------------

fw = open('sample.txt','w')
fw.write("Hello from the python \nIs this a new line")
fw.write("\nwala")
fw.close()

fr = open('sample.txt','r')
text_read = fr.read()
fr.close()
print(text_read)


Downloading file from the web:
--------------------------------

from urllib import request

google_url = 'http://real-chart.finance.yahoo.com/table.csv?s=GOOG&d=10&e=20&f=2014&g=d&a=2&b=27&c=2014&ignore=.csv'

def download_stock_data(csv_url):
    response = request.urlopen(csv_url)  #connect to the URL
    csv = response.read()
    csv_string = str(csv)  # converting to the string

    lines = csv_string.split("\\n")
    dest_url = r'google.csv'  #r is for raw
    fx = open(dest_url,'w')  # opened the file
    for line in lines:
        fx.write(line + "\n")

download_stock_data(google_url)



How to build a web Crawler:
---------------------------

Beautifulsoup4 is a package that can go through the data in the url and sort

import requests
from bs4 import BeautifulSoup

def trade_spider(max_pages):
    page = 1

    while page <= max_pages:
        url = 'https://buckysroom.org/trade/search.php?page='+str(page)
        source_code = requests.get(url)  # gets the source code
        plain_text = source_code.text  # extracts the plain text only

        #Now we will convert it into beautiful soup object
        soup = BeautifulSoup(plain_text)
        for link in soup.findAll('a', {'class': 'item-name'}):  # here 'a' is for the links
            href = "https://buckysroom.org"+link.get('href')
            title = link.string # to get the string in the link, i.e., title
            print(href)
            print(title)
        print("outta loop")
        page += 1

trade_spider(1)


-----------------------------


import requests
from bs4 import BeautifulSoup

def trade_spider(max_pages):
    page = 1

    while page <= max_pages:
        url = 'https://buckysroom.org/trade/search.php?page='+str(page)
        source_code = requests.get(url)  # gets the source code
        plain_text = source_code.text  # extracts the plain text only

        #Now we will convert it into beautiful soup object
        soup = BeautifulSoup(plain_text)
        for link in soup.findAll('a', {'class': 'item-name'}):  # here 'a' is for the links
            href = "https://buckysroom.org"+link.get('href')
            title = link.string
            #print(href)
            #print(title)
            get_single_item_data(href) # here we are going inside each link
        print("outta loop")
        page += 1

def get_single_item_data(item_url):
        source_code = requests.get(item_url)
        plain_text = source_code.text
        soup = BeautifulSoup(plain_text)
        for item_name in soup.findAll('div', {'class': 'i-name'}):
            print(item_name.string)  # here we are getting the titles on the given url with class as i-name
        for link in soup.findAll('a'):
            href = "https://buckysroom.org" + link.get('href') # here we are printing all the url links in the same url
            print(href)
trade_spider(1)






---------------------------------


You are the only exception:
---------------------------


tuna = int(input("what is you fave number ? \n"))
print(tuna)
# This will give error if user enters anything other than numbers
-----------

while True:
    try:
        number = int(input("what's you fav. number? \n"))
        print(" So you like " + str(18/number) + " wala")
        break
    except ValueError:
        print("Enter a number.. \n")
    except ZeroDivisionError:
        print("Cannot divide by zero")
    finally:
        print("Bye bye")



---------------------------


Classes and objects:
--------------------

class Enemy:
    life = 3

    def attack(self):
        print("ouch !")
        self.life -=1
    def checkLife(self):
        if self.life <= 0:
            print(" I am dead")
        else:
            print(str(self.life)+ " life left")

enemy1 = Enemy()
enemy2 = Enemy()
enemy1.attack()
enemy1.attack()
enemy2.attack()
enemy1.checkLife()
enemy2.checkLife()



--------------------------


init:
-----

class Tuna:
    def __init__(self): # this is like a constructor
        print('wala')
    def swim(self):
        print("I am swimming")
flipper = Tuna()
flipper.swim() # It's gonna print wala and then I am swimming

How to pass values to the initializer:
------------------------------------
class Enemy:
    def __init__(self,x):
        self.energy = x
    def get_energy(self):
        print(self.energy)

jason = Enemy(5)
sandy = Enemy(18)
jason.get_energy()
sandy.get_energy()




---------------------------------------



Class variable vs instance variable:
--------------------------------------

class Girl:
    gender = 'female' # this is the class variable and every girl will have the gender equal to female
    def __init__(self, name):
        self.name = name # this is a instance variable, every girl will have different name

r = Girl('Rachel')
s= Girl('Stanky')

print(r.name)
print(r.gender + "\n")

print(s.nam)
print(s.gender)

--------------------------------------


Inheritance:
------------

class Parent:
    def print_last_name(self):
        print("Pradhan")

class Child(Parent):
    def print_first_name(self):
        print("Kushal")
    # overriding the Parent class

    def print_last_name(self):
        print("Obama")



name = Child() # here () is necessary
name.print_first_name()
name.print_last_name()



Multiple Inheritance:
-----------------------

class Mario:
    def move(self):
        print("I am moving...")
class Shroom:
    def eat_shroom(self):
        print("Now I am big")

class BigMario(Mario, Shroom):
    pass # when you have nothing to write but you have to write something to avoid syntax error

bm = BigMario()
bm.eat_shroom()
bm.move()

----------------------------


Threading:
----------


import threading

class KushalMessanger(threading.Thread):
    def run(self): # special name called run
        for _ in range(50): # we don't care about the variable so we use _
            print(threading.current_thread().getName())

x = KushalMessanger(name='send out messages')
y = KushalMessanger(name='receive messages')

x.start() # goes to the KushalMessanger Class and looks for the run method
y.start()


----------------------------------


Word Frequency Counter:
-------------------------

Go to webpage and count the words used in that website.


import requests
from  bs4 import BeautifulSoup
import operator

def start(url):
    word_list =[ ]
    source_code = requests.get(url).text
    soup = BeautifulSoup(source_code)

    for post_text in soup.findAll('a', {'class': 'index_singleListingTitles'}):
        content = post_text.string
        print(content)
        words = content.lower().split()
        for each_words in words:
            print(each_words)
            word_list.append(each_words)

start("https://www.thenewboston.com/tops.php?type=text&period=this-month")

Cleaning up the word by removing the punctuations:

import requests
from  bs4 import BeautifulSoup
import operator

def start(url):
    word_list =[ ]
    source_code = requests.get(url).text
    soup = BeautifulSoup(source_code)

    for post_text in soup.findAll('a', {'class': 'index_singleListingTitles'}):
        content = post_text.string
        print(content)
        words = content.lower().split()
        for each_words in words:
            word_list.append(each_words)
    clean_Up_List(word_list)

def clean_Up_List (word_list):
    clean_word_list = []
    for word in word_list:
        symbols = "!@#$%^&*()_+<>,./?':;-"
        for i in range(0, len(symbols)):
            word = word.replace(symbols[i],"") #replaces a symbol with blank space
        if len(word) >0:
            print(word)
            clean_word_list.append(word)

start("https://www.thenewboston.com/tops.php?type=text&period=this-month")


